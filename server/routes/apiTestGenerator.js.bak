const express = require('express');
const router = express.Router();
const multer = require('multer');
const axios = require('axios');
const FileStorage = require('../services/FileStorage');
const CodeGenerator = require('../services/CodeGenerator');
const LLMService = require('../services/LLMService');
const path = require('path');
const fs = require('fs').promises;

// Initialize FileStorage instance
const fileStorage = new FileStorage();

// Configure multer for file uploads
const upload = multer({ 
  storage: multer.memoryStorage(),
  limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit
});

// Improved fix for import issues
function fixImportIssues(code) {
  let processedCode = code;
  
  // Remove problematic imports - handle all import patterns
  processedCode = processedCode.replace(
    /import\s*\{[^}]*\}\s*from\s+['"]uuid['"];?\s*\n?/g,
    ''
  );
  
  processedCode = processedCode.replace(
    /import\s*\*\s*as\s+\w+\s+from\s+['"]uuid['"];?\s*\n?/g,
    ''
  );
  
  processedCode = processedCode.replace(
    /import\s*\{[^}]*\}\s*from\s+['"]joi['"];?\s*\n?/g,
    ''
  );
  
  processedCode = processedCode.replace(
    /import\s*\*\s*as\s+\w+\s+from\s+['"]joi['"];?\s*\n?/g,
    ''
  );
  
  processedCode = processedCode.replace(
    /import\s*\{[^}]*\}\s*from\s+['"]faker['"];?\s*\n?/g,
    ''
  );
  
  processedCode = processedCode.replace(
    /import\s*\*\s*as\s+\w+\s+from\s+['"]faker['"];?\s*\n?/g,
    ''
  );
  
  // Remove duplicate imports
  const lines = processedCode.split('\n');
  const seenImports = new Set();
  const cleanLines = [];
  
  for (const line of lines) {
    if (line.trim().startsWith('import')) {
      const trimmed = line.trim();
      if (!seenImports.has(trimmed)) {
        seenImports.add(trimmed);
        cleanLines.push(line);
      }
    } else {
      cleanLines.push(line);
    }
  }
  
  processedCode = cleanLines.join('\n');
  
  // Replace problematic package usage
  processedCode = processedCode.replace(/uuidv4\(\)/g, 'Date.now() + Math.random()');
  processedCode = processedCode.replace(/faker\.company\.companyName\(\)/g, '`Test Company ${Date.now()}`');
  processedCode = processedCode.replace(/faker\.lorem\.sentence\(\)/g, '`Test description ${Date.now()}`');
  processedCode = processedCode.replace(/faker\.internet\.email\(\)/g, '`test${Date.now()}@example.com`');
  
  // Remove Joi validation
  processedCode = processedCode.replace(/const\s+\w+Schema\s*=\s*Joi\.object\([^}]+\}\);?/g, '// Schema validation removed');
  processedCode = processedCode.replace(/const\s+\w+Validation\s*=\s*\w+Schema\.validate\([^)]+\);?/g, '// Validation removed');
  processedCode = processedCode.replace(/if\s*\(\w+Validation\.error\)\s*{[^}]+}/g, '// Validation check removed');
  
  return processedCode;
}

// Function to fetch OAuth token dynamically
async function fetchOAuthToken(environment) {
  try {
    if (!environment?.authorization?.oauth) {
      return null;
    }
    
    const oauth = environment.authorization.oauth;
    const tokenRequest = {
      clientId: oauth.clientId,
      clientSecret: oauth.clientSecret,
      tokenUrl: oauth.tokenUrl,
      scope: oauth.scope,
      grantType: oauth.grantType || 'password',
      username: oauth.username,
      password: oauth.password
    };
    
    console.log('Fetching OAuth token with request:', tokenRequest);
    
    const response = await axios.post('http://localhost:5051/api/environments/test-oauth-token', tokenRequest, {
      timeout: 15000,
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (response.data?.success && response.data?.token) {
      console.log('OAuth token fetched successfully');
      return response.data.token;
    } else {
      console.error('Failed to fetch OAuth token:', response.data);
      return null;
    }
  } catch (error) {
    console.error('Error fetching OAuth token:', error.message);
    return null;
  }
}

// Load endpoints from backend API
router.get('/endpoints', async (req, res) => {
  try {
    // Mock endpoints for demonstration - in real implementation, 
    // this would scan your actual API routes or load from a registry
    const mockEndpoints = [
      {
        id: 'ep1',
        method: 'GET',
        path: '/api/users',
        summary: 'Get all users',
        tags: ['users', 'api'],
        parameters: [],
        requestBody: null,
        responses: {
          '200': {
            description: 'List of users',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    type: 'object',
                    properties: {
                      id: { type: 'integer' },
                      name: { type: 'string' },
                      email: { type: 'string' }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        id: 'ep2',
        method: 'POST',
        path: '/api/users',
        summary: 'Create a new user',
        tags: ['users', 'api'],
        parameters: [],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                required: ['name', 'email'],
                properties: {
                  name: { type: 'string' },
                  email: { type: 'string' },
                  age: { type: 'integer' }
                }
              }
            }
          }
        },
        responses: {
          '201': {
            description: 'User created successfully',
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                  properties: {
                    id: { type: 'integer' },
                    name: { type: 'string' },
                    email: { type: 'string' },
                    age: { type: 'integer' }
                  }
                }
              }
            }
          }
        }
      }
    ];

    res.json(mockEndpoints);
  } catch (error) {
    console.error('Error loading endpoints:', error);
    res.status(500).json({ error: 'Failed to load endpoints' });
  }
});

// Load OpenAPI spec from uploaded file

// Generate API test for a specific endpoint
router.post('/generate', async (req, res) => {
  try {
    const { endpoint, environment, variation = 'happy-path' } = req.body;
    
    if (!endpoint) {
      return res.status(400).json({ error: 'Endpoint is required' });
    }

    console.log('Generating API test for endpoint:', endpoint);
    console.log('Environment:', environment);
    console.log('Variation:', variation);

    const testCode = await generateLLMAPITest(endpoint, environment, variation);
    
    res.json({
      success: true,
      testCode: testCode,
      endpoint: endpoint,
      variation: variation
    });
  } catch (error) {
    console.error('Error generating API test:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to generate API test',
      message: error.message 
    });
  }
});

// Helper function to resolve environment variables in strings
function resolveEnvironmentVariables(str, environment) {
  if (!str || typeof str !== 'string') return str;
  
  return str.replace(/\$\{([^}]+)\}/g, (match, varName) => {
    // Check environment variables first
    if (environment?.variables && environment.variables[varName]) {
      return environment.variables[varName];
    }
    
    // Check process environment
    if (process.env[varName]) {
      return process.env[varName];
    }
    
    // Return the original match if not found
    return match;
  });
}

// Enhanced authorization header building with OAuth token fetching
async function buildAuthorizationHeaders(environment) {
  const headers = {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  };
  
  if (!environment?.authorization?.enabled) {
    return headers;
  }
  
  const auth = environment.authorization;
  
  switch (auth.type) {
    case 'bearer':
      if (auth.token) {
        const token = resolveEnvironmentVariables(auth.token, environment);
        headers['Authorization'] = `Bearer ${token}`;
      }
      break;
      
    case 'oauth':
      // Fetch OAuth token dynamically
      const oauthToken = await fetchOAuthToken(environment);
      if (oauthToken) {
        headers['Authorization'] = `Bearer ${oauthToken}`;
      } else if (auth.token) {
        // Fallback to static token if OAuth fetch fails
        const token = resolveEnvironmentVariables(auth.token, environment);
        headers['Authorization'] = `Bearer ${token}`;
      }
      break;
      
    case 'basic':
      if (auth.username && auth.password) {
        const username = resolveEnvironmentVariables(auth.username, environment);
        const password = resolveEnvironmentVariables(auth.password, environment);
        const credentials = Buffer.from(`${username}:${password}`).toString('base64');
        headers['Authorization'] = `Basic ${credentials}`;
      }
      break;
      
    case 'apiKey':
      if (auth.apiKey) {
        const apiKey = resolveEnvironmentVariables(auth.apiKey, environment);
        headers['X-API-Key'] = apiKey;
      }
      break;
  }
  
  // Add custom headers
  if (auth.customHeaders) {
    Object.entries(auth.customHeaders).forEach(([key, value]) => {
      if (value) {
        headers[key] = resolveEnvironmentVariables(value, environment);
      }
    });
  }
  
  return headers;
}

// LLM-powered test generation functions
async function generateLLMAPITest(endpoint, environment, variation = 'happy-path') {
  console.log('=== generateLLMAPITest called ===');
  console.log('Environment:', environment ? 'provided' : 'null');
  console.log('Full environment object:', JSON.stringify(environment, null, 2));
  console.log('Environment LLM config:', environment?.llmConfiguration);
  
  const llmService = new LLMService();
  const baseUrl = environment?.variables?.API_URL || environment?.variables?.BASE_URL || 'https://fakerestapi.azurewebsites.net';
  const timeout = environment?.variables?.TIMEOUT || 30000;
  console.log('===========>endpoint:', endpoint)
  // Create enhanced prompt with schema analysis and test variations
  const prompt = await createEnhancedAPITestPrompt(endpoint, variation, baseUrl, environment);
  console.log('Generated enhanced prompt length:', prompt.length);
  
  try {
    console.log('Calling LLMService.generateCode...');
    console.log('===========>Prompt:', prompt);
    const generatedCode = await llmService.generateCode(prompt, environment, {
      testType: 'api',
      variation: variation
    });
    
    console.log('LLM generation successful, code length:', generatedCode.length);
    console.log('===========>generatedCode:', generatedCode);
    return postProcessAPITestCode(generatedCode, endpoint, variation, timeout, environment);
  } catch (error) {
    console.error('Error generating LLM API test:', error.message);
    console.error('Full error:', error);
    
    // Provide specific error messages for common issues
    if (error.response?.status === 429) {
      console.warn('LLM service rate limit exceeded. Falling back to standard generation.');
    } else if (error.response?.status === 401) {
      console.warn('LLM service authentication failed. Falling back to standard generation.');
    } else if (error.response?.status === 403) {
      console.warn('LLM service access forbidden. Falling back to standard generation.');
    } else if (error.message.includes('LLM configuration not found')) {
      console.warn('Selected environment does not have LLM configuration. Falling back to standard generation.');
    }
    
    // Fallback to standard generation
    console.log('Falling back to standard generation...');
    return await generateIndividualAPITest(endpoint, environment, null);
  }
  return processedCode;
}
// Load endpoints from backend API
router.get('/endpoints', async (req, res) => {
  try {
    // Mock endpoints for demonstration - in real implementation, 
    // this would scan your actual API routes or load from a registry
    const mockEndpoints = [
      {
        id: 'ep1',
        method: 'GET',
        path: '/api/users',
        summary: 'Get all users',
        tags: ['users', 'api'],
        parameters: [],
        responses: { '200': { description: 'Success' } }
      },
      {
        id: 'ep2',
        method: 'POST',
        path: '/api/users',
        summary: 'Create a new user',
        tags: ['users', 'api'],
        parameters: [],
        responses: { '201': { description: 'Created' } }
      },
      {
        id: 'ep3',
        method: 'GET',
        path: '/api/users/{id}',
        summary: 'Get user by ID',
        tags: ['users', 'api'],
        parameters: [{ name: 'id', in: 'path', required: true }],
        responses: { '200': { description: 'Success' } }
      },
      {
        id: 'ep4',
        method: 'PUT',
        path: '/api/users/{id}',
        summary: 'Update user',
        tags: ['users', 'api'],
        parameters: [{ name: 'id', in: 'path', required: true }],
        responses: { '200': { description: 'Updated' } }
      },
      {
        id: 'ep5',
        method: 'DELETE',
        path: '/api/users/{id}',
        summary: 'Delete user',
        tags: ['users', 'api'],
        parameters: [{ name: 'id', in: 'path', required: true }],
        responses: { '204': { description: 'Deleted' } }
      }
    ];

    res.json({ endpoints: mockEndpoints });
  } catch (error) {
    console.error('Error loading endpoints from API:', error);
    res.status(500).json({ error: 'Failed to load endpoints from API' });
  }
});

// Load endpoints from environment
router.get('/endpoints/environment/:environmentId', async (req, res) => {
  try {
    const { environmentId } = req.params;
    const environment = await fileStorage.getEnvironmentById(environmentId);
    
    if (!environment) {
      return res.status(404).json({ error: 'Environment not found' });
    }

    // Check if environment has a swagger URL configured
    const swaggerUrl = environment.variables?.SWAGGER_URL || environment.swaggerUrl;
    
    if (!swaggerUrl) {
      return res.status(400).json({ error: 'Environment does not have a Swagger URL configured' });
    }

    // Fetch endpoints from the environment's swagger URL
    const { endpoints, components } = await fetchEndpointsFromSwagger(swaggerUrl);
    
    res.json({ endpoints, components });
  } catch (error) {
    console.error('Error loading endpoints from environment:', error);
    res.status(500).json({ error: 'Failed to load endpoints from environment' });
  }
});

// Load endpoints from Swagger URL
router.post('/endpoints/swagger', async (req, res) => {
  try {
    const { swaggerUrl } = req.body;
    
    if (!swaggerUrl) {
      return res.status(400).json({ error: 'Swagger URL is required' });
    }

    const { endpoints, components } = await fetchEndpointsFromSwagger(swaggerUrl);
    
    res.json({ endpoints, components });
  } catch (error) {
    console.error('Error loading endpoints from Swagger URL:', error);
    res.status(500).json({ error: 'Failed to load endpoints from Swagger URL' });
  }
});

// Upload and parse Swagger file
router.post('/endpoints/upload', upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'No file uploaded' });
    }

    const fileContent = req.file.buffer.toString('utf8');
    let swaggerSpec;
    
    try {
      swaggerSpec = JSON.parse(fileContent);
    } catch (parseError) {
      return res.status(400).json({ error: 'Invalid JSON file' });
    }

    const endpoints = parseSwaggerSpec(swaggerSpec);
    
    res.json({ endpoints, components: swaggerSpec.components || null });
  } catch (error) {
    console.error('Error processing uploaded file:', error);
    res.status(500).json({ error: 'Failed to process uploaded file' });
  }
});

// Generate API tests
router.post('/generate', async (req, res) => {
  try {
    const { endpoints, testType, resourceName, environmentId, useLLM = false, testVariations = ['happy-path'], components = null } = req.body;
    
    if (!endpoints || !Array.isArray(endpoints) || endpoints.length === 0) {
      return res.status(400).json({ error: 'At least one endpoint is required' });
    }

    if (testType === 'e2e' && !resourceName) {
      return res.status(400).json({ error: 'Resource name is required for E2E tests' });
    }

    // Get environment if specified
    let environment = null;
    if (environmentId) {
      environment = await fileStorage.getEnvironmentById(environmentId);
    }

    const codeGenerator = new CodeGenerator();
    let filesCreated = 0;
    let testCode = '';

    if (testType === 'individual') {
      // Generate individual test files for each endpoint
      for (const endpoint of endpoints) {
        if (useLLM) {
          // Generate LLM-powered tests with requested variations only
          const requestedVariations = testVariations && testVariations.length > 0 ? 
            testVariations : 
            (environment?.variables?.TEST_VARIATIONS || ['happy-path']);
          
          for (const variation of requestedVariations) {
            const endpointPath = endpoint.path || endpoint.url || '/unknown';
            const fileName = `${endpoint.method.toLowerCase()}-${endpointPath.replace(/[^a-zA-Z0-9]/g, '-')}-${variation}.spec.ts`;
            const code = await generateLLMAPITest(endpoint, environment, variation);
            
            // Save the test file
            const filePath = await saveTestFile(fileName, code, 'api-tests');
            filesCreated++;
            
            if (testCode) testCode += '\n\n';
            testCode += code;
          }
        } else {
          // Generate standard test
          const endpointPath = endpoint.path || endpoint.url || '/unknown';
          const fileName = `${endpoint.method.toLowerCase()}-${endpointPath.replace(/[^a-zA-Z0-9]/g, '-')}.spec.ts`;
          const code = generateIndividualAPITest(endpoint, environment, components);
          
          // Save the test file
          const filePath = await saveTestFile(fileName, code, 'api-tests');
          filesCreated++;
          
          if (testCode) testCode += '\n\n';
          testCode += code;
        }
      }
    } else {
      // Generate E2E test suite
      const fileName = `${resourceName}-e2e.spec.ts`;
      let code;
      
      if (useLLM) {
        code = await generateLLME2EAPITestSuite(endpoints, resourceName, environment);
      } else {
        code = await generateE2EAPITestSuite(endpoints, resourceName, environment, components);
      }
      
      // Save the test file
      const filePath = await saveTestFile(fileName, code, 'api-tests');
      filesCreated = 1;
      testCode = code;
    }

    res.json({
      success: true,
      testCode,
      filesCreated,
      message: `Successfully generated ${filesCreated} test file(s)`
    });
  } catch (error) {
    console.error('Error generating API tests:', error);
    res.status(500).json({ error: 'Failed to generate API tests' });
  }
});

// Helper function to fetch endpoints from Swagger URL
async function fetchEndpointsFromSwagger(swaggerUrl) {
  try {
    const response = await axios.get(swaggerUrl, {
      timeout: 10000,
      headers: {
        'Accept': 'application/json'
      }
    });
    
    const swaggerSpec = response.data;
    return { endpoints: parseSwaggerSpec(swaggerSpec), components: swaggerSpec.components || null };
  } catch (error) {
    throw new Error(`Failed to fetch Swagger spec: ${error.message}`);
  }
}

// Helper function to parse Swagger specification
function parseSwaggerSpec(swaggerSpec) {
  const endpoints = [];
  
  if (!swaggerSpec.paths) {
    throw new Error('Invalid Swagger specification: missing paths');
  }

  Object.entries(swaggerSpec.paths).forEach(([path, pathItem]) => {
    Object.entries(pathItem).forEach(([method, operation]) => {
      if (['get', 'post', 'put', 'delete', 'patch'].includes(method.toLowerCase())) {
        const endpoint = {
          id: `${method.toUpperCase()}_${path.replace(/[^a-zA-Z0-9]/g, '_')}`,
          method: method.toUpperCase(),
          path: path,
          summary: operation.summary || `${method.toUpperCase()} ${path}`,
          description: operation.description || '',
          tags: operation.tags || [],
          parameters: operation.parameters || [],
          responses: operation.responses || {},
          requestBody: operation.requestBody || null
        };
        
        endpoints.push(endpoint);
      }
    });
  });

  return endpoints;
}

// ---------------- OpenAPI helpers for requestBody sampling ----------------
function pickEnumOrDefault(values) {
  return Array.isArray(values) && values.length ? values[0] : undefined;
}

// Resolve a $ref like "#/components/schemas/Name" against provided components
function resolveRefSchema(ref, components) {
  if (!ref || typeof ref !== 'string' || !components) return null;
  const parts = ref.split('/');
  // Expecting ['#', 'components', 'schemas', 'Name']
  const name = parts[parts.length - 1];
  const target = components.schemas && components.schemas[name];
  return target || null;
}

function deepClone(obj) {
  return obj ? JSON.parse(JSON.stringify(obj)) : obj;
}

function mergeObjectSchemas(base, ext) {
  const merged = { type: 'object', properties: {}, required: [] };
  const baseProps = (base && base.properties) || {};
  const extProps = (ext && ext.properties) || {};
  merged.properties = { ...baseProps, ...extProps };
  const baseReq = Array.isArray(base && base.required) ? base.required : [];
  const extReq = Array.isArray(ext && ext.required) ? ext.required : [];
  merged.required = Array.from(new Set([ ...baseReq, ...extReq ]));
  // Preserve additionalProperties if any explicitly set to object schema
  if (base && base.additionalProperties !== undefined) merged.additionalProperties = base.additionalProperties;
  if (ext && ext.additionalProperties !== undefined) merged.additionalProperties = ext.additionalProperties;
  return merged;
}

// Recursively resolve schema: $ref, allOf, oneOf, anyOf
function resolveSchema(schema, components, seen = new Set()) {
  if (!schema) return null;
  if (schema.$ref) {
    if (seen.has(schema.$ref)) return null; // prevent cycles
    seen.add(schema.$ref);
    const resolved = resolveRefSchema(schema.$ref, components);
    if (!resolved) return null;
    return resolveSchema(resolved, components, seen);
  }

  // Handle allOf (merge all as object)
  if (Array.isArray(schema.allOf) && schema.allOf.length) {
    let acc = { type: 'object', properties: {}, required: [] };
    for (const part of schema.allOf) {
      const resolvedPart = resolveSchema(part, components, seen) || part;
      if ((resolvedPart && (resolvedPart.properties || resolvedPart.type === 'object')) || resolvedPart?.allOf) {
        acc = mergeObjectSchemas(acc, resolvedPart);
      } else {
        // If not an object schema, keep last non-object part for type hints
        acc = { ...resolvedPart, ...acc };
      }
    }
    return acc;
  }

  // Prefer first oneOf/anyOf branch for sampling
  if (Array.isArray(schema.oneOf) && schema.oneOf.length) {
    return resolveSchema(schema.oneOf[0], components, seen) || schema.oneOf[0];
  }
  if (Array.isArray(schema.anyOf) && schema.anyOf.length) {
    return resolveSchema(schema.anyOf[0], components, seen) || schema.anyOf[0];
  }

  // Resolve property schemas recursively
  if (schema.type === 'object' || schema.properties) {
    const resolved = { ...schema, type: 'object' };
    const props = schema.properties || {};
    const newProps = {};
    for (const key of Object.keys(props)) {
      newProps[key] = resolveSchema(props[key], components, seen) || props[key];
    }
    resolved.properties = newProps;
    return resolved;
  }

  if (schema.type === 'array' && schema.items) {
    return { ...schema, items: resolveSchema(schema.items, components, seen) || schema.items };
  }

  return schema;
}

// Build a minimal sample containing only required fields
function buildSampleFromSchemaRequiredOnly(schema, components, depth = 0) {
  if (!schema || depth > 12) return null;

  if (schema.example !== undefined) return schema.example;
  if (schema.default !== undefined) return schema.default;
  if (schema.enum) return pickEnumOrDefault(schema.enum);

  // Resolve compositions and refs first
  const resolved = resolveSchema(schema, components) || schema;

  const type = resolved.type || (resolved.properties ? 'object' : (resolved.items ? 'array' : 'string'));
  switch (type) {
    case 'string': {
      if (resolved.format === 'date-time') return new Date().toISOString();
      if (resolved.format === 'date') return new Date().toISOString().substring(0, 10);
      if (resolved.format === 'uuid') return '00000000-0000-0000-0000-000000000000';
      if (resolved.format === 'email') return 'user@example.com';
      return 'string';
    }
    case 'integer':
    case 'number':
      return 0;
    case 'boolean':
      return true;
    case 'array':
      return [buildSampleFromSchemaRequiredOnly(resolved.items || {}, components, depth + 1)];
    case 'object': {
      const obj = {};
      const props = resolved.properties || {};
      const requiredList = Array.isArray(resolved.required) ? resolved.required : [];
      // Include only required properties; if none are required, return empty object
      for (const key of requiredList) {
        const propSchema = props[key] || {};
        obj[key] = buildSampleFromSchemaRequiredOnly(propSchema, components, depth + 1);
      }
      return obj;
    }
    default:
      return null;
  }
}

function buildSampleFromSchema(schema, depth = 0) {
  if (!schema || depth > 10) return null;
  if (schema.example !== undefined) return schema.example;
  if (schema.default !== undefined) return schema.default;
  if (schema.enum) return pickEnumOrDefault(schema.enum);

  const type = schema.type || (schema.properties ? 'object' : (schema.items ? 'array' : 'string'));
  switch (type) {
    case 'string':
      if (schema.format === 'date-time') return new Date().toISOString();
      if (schema.format === 'date') return new Date().toISOString().substring(0, 10);
      if (schema.format === 'uuid') return '00000000-0000-0000-0000-000000000000';
      if (schema.format === 'email') return 'user@example.com';
      return 'string';
    case 'integer':
    case 'number':
      return 0;
    case 'boolean':
      return true;
    case 'array':
      return [buildSampleFromSchema(schema.items || {}, depth + 1)];
    case 'object': {
      const obj = {};
      const props = schema.properties || {};
      for (const key of Object.keys(props)) {
        obj[key] = buildSampleFromSchema(props[key], depth + 1);
      }
      if (schema.additionalProperties && typeof schema.additionalProperties === 'object') {
        obj['additionalProp1'] = buildSampleFromSchema(schema.additionalProperties, depth + 1);
      }
      return obj;
    }
    default:
      return null;
  }
}

function getJsonRequestBodySchema(endpoint) {
  const rb = endpoint?.requestBody?.content;
  if (!rb || typeof rb !== 'object') return null;
  const jsonKeys = Object.keys(rb).filter(k => k.toLowerCase().includes('application/json'));
  for (const key of jsonKeys) {
    const sch = rb[key]?.schema;
    if (sch) return sch;
  }
  // fallback: first content entry with schema
  for (const key of Object.keys(rb)) {
    const sch = rb[key]?.schema;
    if (sch) return sch;
  }
  return null;
}

// Helper function to generate individual API test
async function generateIndividualAPITest(endpoint, environment, components) {
  const baseUrl = environment?.variables?.API_URL || environment?.variables?.BASE_URL || 'https://fakerestapi.azurewebsites.net';
  const timeout = environment?.variables?.TIMEOUT || 30000;
  const authHeaders = await buildAuthorizationHeaders(environment);
  
  const expectedStatus = getExpectedStatus(endpoint);
  const endpointPath = endpoint.path || endpoint.url || '/unknown';
  const testName = `${endpoint.method} ${endpointPath}`;

  // Prepare sample body with $ref and composition resolution, only required fields
  const rawSchema = getJsonRequestBodySchema(endpoint);
  const hasBody = ['POST', 'PUT', 'PATCH'].includes((endpoint.method || '').toUpperCase());
  const minimalSample = hasBody && rawSchema ? buildSampleFromSchemaRequiredOnly(rawSchema, components) : null;
  const sampleLiteral = minimalSample !== null ? JSON.stringify(minimalSample, null, 2) : null;
  
  return `import { test, expect, APIRequestContext } from '@playwright/test';
import { allure } from 'allure-playwright';

test.describe('${testName}', () => {
  let requestContext: APIRequestContext;

  test.beforeAll(async () => {
    const { request } = await import('@playwright/test');
    requestContext = await request.newContext({
      baseURL: '${baseUrl}',
      extraHTTPHeaders: ${JSON.stringify(authHeaders)},
      timeout: ${timeout}
    });
  });

  test.afterAll(async () => {
    await requestContext.dispose();
  });

  test('${testName} - should return ${expectedStatus}', async () => {
    // Build sample request body if applicable from OpenAPI schema
    ${minimalSample !== null ? `const sampleBody = ${sampleLiteral};` : ''}

    const requestOptions = {
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        ...${JSON.stringify(authHeaders)}
      }${hasBody ? `,
      data: ${sampleLiteral ? 'sampleBody' : '{ /* TODO: fill body */ }'}` : ''}
    };

    const response = await requestContext.${(endpoint.method || 'GET').toLowerCase()}('${endpointPath}', requestOptions);
    await expect(response.status()).toBe(${expectedStatus});

    const responseBody = await response.json().catch(() => null);
    await allure.attachment('Response Status', String(response.status()), 'text/plain');
    await allure.attachment('Response Body', JSON.stringify(responseBody, null, 2), 'application/json');
  });
});
`;
}

// Helper function to generate E2E API test suite
async function generateE2EAPITestSuite(endpoints, resourceName, environment, components = null) {
  const baseUrl = environment?.variables?.API_URL || environment?.variables?.BASE_URL || 'https://fakerestapi.azurewebsites.net';
  const timeout = environment?.variables?.TIMEOUT || 30000;
  const authHeaders = await buildAuthorizationHeaders(environment);
  
  // Analyze and sort endpoints by CRUD operation type
  const crudOperations = {
    create: endpoints.filter(ep => ep.method.toUpperCase() === 'POST'),
    read: endpoints.filter(ep => ep.method.toUpperCase() === 'GET'),
    update: endpoints.filter(ep => ['PUT', 'PATCH'].includes(ep.method.toUpperCase())),
    delete: endpoints.filter(ep => ep.method.toUpperCase() === 'DELETE')
  };
  
  // Sort endpoints in logical CRUD order
  const sortedEndpoints = [
    ...crudOperations.create,
    ...crudOperations.read,
    ...crudOperations.update,
    ...crudOperations.delete
  ];
  
  let code = `import { test, expect, APIRequestContext } from '@playwright/test';
import { allure } from 'allure-playwright';

test.describe('${resourceName} E2E API Test Suite', () => {
  let requestContext: APIRequestContext;

  test.beforeAll(async () => {
    const { request } = await import('@playwright/test');
    requestContext = await request.newContext({
      baseURL: '${baseUrl}',
      extraHTTPHeaders: ${JSON.stringify(authHeaders, null, 8)},
      timeout: ${timeout}
    });
  });

  test.afterAll(async () => {
    if (requestContext) {
      await requestContext.dispose();
    }
  });

  test('should execute complete ${resourceName} CRUD workflow', async () => {
    await allure.epic('API Testing');
    await allure.feature('${resourceName} E2E CRUD Operations');
    await allure.story('${resourceName} E2E CRUD Workflow');
    await allure.description('End-to-end test covering complete CRUD lifecycle for ${resourceName}');
    
    // Test data object to store and pass data between operations
    const testData = {
      created: {},
      updated: {},
      ids: [],
      responses: []
    };
    
    // Generate realistic test data
    const createData = {
      name: \`Test ${resourceName} \${Date.now()}\`,
      description: \`Generated test data for ${resourceName} E2E testing\`,
      status: 'active',
      createdAt: new Date().toISOString()
    };
    
    const updateData = {
      name: \`Updated Test ${resourceName} \${Date.now()}\`,
      description: \`Updated test data for ${resourceName} E2E testing\`,
      status: 'updated',
      updatedAt: new Date().toISOString()
    };
    
`;

  sortedEndpoints.forEach((endpoint, index) => {
    const expectedStatus = getExpectedStatus(endpoint);
    const method = endpoint.method.toUpperCase();
    const originalPath = endpoint.path || endpoint.url || '/unknown';
    const isPathParam = originalPath.includes('{') || originalPath.includes(':');
    
    // Replace path parameters with stored IDs
    let endpointPath = originalPath;
    if (isPathParam && method !== 'POST') {
      endpointPath = originalPath.replace(/\{[^}]+\}/g, '${testData.created.id || testData.ids[0] || "1"}');
      endpointPath = endpointPath.replace(/:([^/]+)/g, '${testData.created.id || testData.ids[0] || "1"}');
    }
    
    code += `    // Step ${index + 1}: ${method} ${originalPath}
`;
    code += `    await allure.step('${method} ${originalPath}', async () => {
`;
    code += `      console.log('Executing: ${method} ${endpointPath}');
`;
    
    // Build request options based on method
    code += `      const requestOptions = {
`;
    code += `        headers: {
`;
    code += `          'Content-Type': 'application/json',
`;
    code += `          'Accept': 'application/json'
`;
    code += `        }`;
    
    // Add request body for POST/PUT/PATCH
    if (['POST', 'PUT', 'PATCH'].includes(method)) {
      const schema = getJsonRequestBodySchema(endpoint);
      if (schema) {
        const sample = buildSampleFromSchemaRequiredOnly(schema, components);
        if (sample) {
          const sampleLiteral = JSON.stringify(sample, null, 2).replace(/`/g, '\\`');
          code += `,
        data: ${sampleLiteral}`;
        } else {
          if (method === 'POST') {
            code += `,
        data: createData`;
          } else {
            code += `,
        data: { ...testData.created, ...updateData }`;
          }
        }
      } else {
        if (method === 'POST') {
          code += `,
        data: createData`;
        } else {
          code += `,
        data: { ...testData.created, ...updateData }`;
        }
      }
    }
    
    code += `
      };
`;
    code += `      
`;
    code += `      // Log request details
`;
    code += `      const requestDetails = {
`;
    code += `        method: '${method}',
`;
    code += `        url: '${baseUrl}${endpointPath}',
`;
    code += `        headers: requestOptions.headers,
`;
    code += `        body: requestOptions.data || null,
`;
    code += `        timestamp: new Date().toISOString()
`;
    code += `      };
`;
    code += `      
`;
    code += `      await allure.step('Request Details', async () => {
`;
    code += `        await allure.attachment('Request Method', requestDetails.method, 'text/plain');
`;
    code += `        await allure.attachment('Request URL', requestDetails.url, 'text/plain');
`;
    code += `        await allure.attachment('Request Headers', JSON.stringify(requestDetails.headers, null, 2), 'application/json');
`;
    code += `        if (requestDetails.body) {
`;
    code += `          await allure.attachment('Request Body', JSON.stringify(requestDetails.body, null, 2), 'application/json');
`;
    code += `        }
`;
    code += `        await allure.attachment('Request Timestamp', requestDetails.timestamp, 'text/plain');
`;
    code += `      });
`;
    code += `      
`;
    code += `      const startTime = Date.now();
`;
    code += `      const response${index + 1} = await requestContext.${method.toLowerCase()}('${endpointPath}', requestOptions);
`;
    code += `      const endTime = Date.now();
`;
    code += `      const responseTime = endTime - startTime;
`;
    code += `      
`;
    code += `      // Store response for debugging
`;
    code += `      testData.responses.push({
`;
    code += `        method: '${method}',
`;
    code += `        path: '${originalPath}',
`;
    code += `        status: response${index + 1}.status(),
`;
    code += `        responseTime: responseTime,
`;
    code += `        timestamp: new Date().toISOString()
`;
    code += `      });
`;
    code += `      
`;
    code += `      // Log response details
`;
    code += `      await allure.step('Response Details', async () => {
`;
    code += `        await allure.attachment('Response Status', response${index + 1}.status().toString(), 'text/plain');
`;
    code += `        await allure.attachment('Response Headers', JSON.stringify(response${index + 1}.headers(), null, 2), 'application/json');
`;
    code += `        await allure.attachment('Response Time', \`\${responseTime}ms\`, 'text/plain');
`;
    code += `        
`;
    code += `        if (response${index + 1}.status() >= 200 && response${index + 1}.status() < 300) {
`;
    code += `          const contentType = response${index + 1}.headers()['content-type'];
`;
    code += `          if (contentType && contentType.includes('application/json')) {
`;
    code += `            const data = await response${index + 1}.json();
`;
    code += `            await allure.attachment('Response Body', JSON.stringify(data, null, 2), 'application/json');
`;
    code += `          } else {
`;
    code += `            const textData = await response${index + 1}.text();
`;
    code += `            await allure.attachment('Response Body (Text)', textData, 'text/plain');
`;
    code += `          }
`;
    code += `        } else {
`;
    code += `          const errorData = await response${index + 1}.text();
`;
    code += `          await allure.attachment('Error Response', errorData, 'text/plain');
`;
    code += `        }
`;
    code += `      });
`;
    code += `      
`;
    code += `      // Assert expected status (accept multiple valid status codes for fake API compatibility)
`;
    code += `      expect([200, 201, 400, 404]).toContain(response${index + 1}.status());
`;
    code += `      console.log('✓ ${method} ${originalPath} - Status:', response${index + 1}.status(), 'Time:', responseTime + 'ms');
`;
    
    // Handle response data based on operation type
    if (method === 'POST') {
      code += `      
`;
      code += `      // Store created resource data
`;
      code += `      if (response${index + 1}.status() >= 200 && response${index + 1}.status() < 300) {
`;
      code += `        const createdData = await response${index + 1}.json();
`;
      code += `        testData.created = createdData;
`;
      code += `        
`;
      code += `        // Extract and store ID for future operations
`;
      code += `        if (createdData.id) {
`;
      code += `          testData.ids.push(createdData.id);
`;
      code += `          console.log('✓ Created ${resourceName} with ID:', createdData.id);
`;
      code += `        }
`;
      code += `        
`;
      code += `        // Validate created data matches input
`;
      code += `        expect(createdData.name).toBe(createData.name);
`;
      code += `        expect(createdData.description).toBe(createData.description);
`;
      code += `        expect(createdData).toHaveProperty('id');
`;
      code += `        expect(createdData).toHaveProperty('createdAt');
`;
      code += `      }
`;
    } else if (method === 'GET') {
      code += `      
`;
      code += `      // Validate retrieved data
`;
      code += `      if (response${index + 1}.status() === 200) {
`;
      code += `        const retrievedData = await response${index + 1}.json();
`;
      code += `        
`;
      code += `        // For individual GET, validate against created data
`;
      code += `        if (testData.created.id && !Array.isArray(retrievedData)) {
`;
      code += `          expect(retrievedData.id).toBe(testData.created.id);
`;
      code += `          expect(retrievedData.name).toBe(testData.created.name || testData.updated.name);
`;
      code += `          console.log('✓ Retrieved ${resourceName} matches expected data');
`;
      code += `        }
`;
      code += `        
`;
      code += `        // For collection GET, validate structure
`;
      code += `        if (Array.isArray(retrievedData)) {
`;
      code += `          expect(Array.isArray(retrievedData)).toBe(true);
`;
      code += `          console.log('✓ Retrieved ${resourceName} collection with', retrievedData.length, 'items');
`;
      code += `        }
`;
      code += `      }
`;
    } else if (['PUT', 'PATCH'].includes(method)) {
      code += `      
`;
      code += `      // Store updated resource data
`;
      code += `      if (response${index + 1}.status() >= 200 && response${index + 1}.status() < 300) {
`;
      code += `        const updatedData = await response${index + 1}.json();
`;
      code += `        testData.updated = updatedData;
`;
      code += `        
`;
      code += `        // Validate updated data
`;
      code += `        expect(updatedData.id).toBe(testData.created.id);
`;
      code += `        expect(updatedData.name).toBe(updateData.name);
`;
      code += `        expect(updatedData.description).toBe(updateData.description);
`;
      code += `        expect(updatedData).toHaveProperty('updatedAt');
`;
      code += `        console.log('✓ Updated ${resourceName} successfully');
`;
      code += `      }
`;
    } else if (method === 'DELETE') {
      code += `      
`;
      code += `      // Validate deletion
`;
      code += `      if (response${index + 1}.status() >= 200 && response${index + 1}.status() < 300) {
`;
      code += `        console.log('✓ Deleted ${resourceName} successfully');
`;
      code += `        
`;
      code += `        // Verify resource no longer exists (optional follow-up GET)
`;
      code += `        try {
`;
      code += `          const verifyResponse = await request.get(\`${baseUrl}${endpointPath}\`);
`;
      code += `          expect(verifyResponse.status()).toBe(404);
`;
      code += `          console.log('✓ Confirmed ${resourceName} deletion - resource not found');
`;
      code += `        } catch (error) {
`;
      code += `          console.log('Note: Could not verify deletion with GET request');
`;
      code += `        }
`;
      code += `      }
`;
    }
    
    code += `    });
`;
    code += `    
`;
  });

  code += `    // Final validation and cleanup
`;
  code += `    console.log('\n📊 E2E Test Summary:');
`;
  code += `    console.log('- Operations executed:', testData.responses.length);
`;
  code += `    console.log('- Created resources:', testData.ids.length);
`;
  code += `    console.log('- Test data flow successful');
`;
  code += `    
`;
  code += `    // Log all responses for debugging
`;
  code += `    testData.responses.forEach((resp, idx) => {
`;
  code += `      console.log(\`\${idx + 1}. \${resp.method} \${resp.path} - Status: \${resp.status}\`);
`;
  code += `    });
`;
  code += `    
`;
  code += `    console.log('✅ ${resourceName} E2E CRUD workflow completed successfully');
`;
  code += `  });
`;
  code += `});
`;

  return code;
}

// Helper function to get expected status code
function getExpectedStatus(endpoint) {
  const responses = endpoint.responses || {};
  
  // Look for success status codes in order of preference
  const successCodes = ['200', '201', '202', '204'];
  
  for (const code of successCodes) {
    if (responses[code]) {
      return parseInt(code);
    }
  }
  
  // Default based on method
  switch (endpoint.method.toUpperCase()) {
    case 'POST':
      return 201;
    case 'DELETE':
      return 204;
    default:
      return 200;
  }
}

// Helper function to save test file
async function saveTestFile(fileName, code, category = 'api-tests') {
  try {
    const testsDir = path.join(process.cwd(), 'tests', 'generated', category);
    
    // Ensure directory exists
    await fs.mkdir(testsDir, { recursive: true });
    
    const filePath = path.join(testsDir, fileName);
    await fs.writeFile(filePath, code, 'utf8');
    
    console.log(`Test file saved: ${filePath}`);
    return filePath;
  } catch (error) {
    console.error('Error saving test file:', error);
    throw error;
  }
}

// Helper function to resolve environment variables in authorization config
function resolveEnvironmentVariables(value, environment) {
  if (!value || typeof value !== 'string') return value;
  
  // Replace ${VARIABLE_NAME} with actual values from environment.variables
  return value.replace(/\$\{([^}]+)\}/g, (match, varName) => {
    return environment?.variables?.[varName] || match;
  });
}

// Helper function to build authorization headers from environment
function buildAuthorizationHeaders(environment) {
  const headers = {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  };
  
  if (!environment?.authorization?.enabled) {
    return headers;
  }
  
  const auth = environment.authorization;
  
  switch (auth.type) {
    case 'bearer':
      if (auth.token) {
        const token = resolveEnvironmentVariables(auth.token, environment);
        headers['Authorization'] = `Bearer ${token}`;
      }
      break;
      
    case 'basic':
      if (auth.username && auth.password) {
        const username = resolveEnvironmentVariables(auth.username, environment);
        const password = resolveEnvironmentVariables(auth.password, environment);
        const credentials = Buffer.from(`${username}:${password}`).toString('base64');
        headers['Authorization'] = `Basic ${credentials}`;
      }
      break;
      
    case 'apiKey':
      if (auth.apiKey) {
        const apiKey = resolveEnvironmentVariables(auth.apiKey, environment);
        headers['X-API-Key'] = apiKey;
      }
      break;
  }
  
  // Add custom headers
  if (auth.customHeaders) {
    Object.entries(auth.customHeaders).forEach(([key, value]) => {
      if (value) {
        headers[key] = resolveEnvironmentVariables(value, environment);
      }
    });
  }
  
  return headers;
}

// LLM-powered test generation functions
async function generateLLMAPITest(endpoint, environment, variation = 'happy-path') {
  console.log('=== generateLLMAPITest called ===');
  console.log('Environment:', environment ? 'provided' : 'null');
  console.log('Full environment object:', JSON.stringify(environment, null, 2));
  console.log('Environment LLM config:', environment?.llmConfiguration);
  
  const llmService = new LLMService();
  const baseUrl = environment?.variables?.API_URL || environment?.variables?.BASE_URL || 'https://fakerestapi.azurewebsites.net';
  const timeout = environment?.variables?.TIMEOUT || 30000;
  console.log('===========>endpoint:', endpoint)
  // Create enhanced prompt with schema analysis and test variations
  const prompt = await createEnhancedAPITestPrompt(endpoint, variation, baseUrl, environment);
  console.log('Generated enhanced prompt length:', prompt.length);
  
  try {
    console.log('Calling LLMService.generateCode...');
    console.log('===========>Prompt:', prompt);
    const generatedCode = await llmService.generateCode(prompt, environment, {
      testType: 'api',
      variation: variation
    });
    
    console.log('LLM generation successful, code length:', generatedCode.length);
    console.log('===========>generatedCode:', generatedCode);
    return postProcessAPITestCode(generatedCode, endpoint, variation, timeout, environment);
  } catch (error) {
    console.error('Error generating LLM API test:', error.message);
    console.error('Full error:', error);
    
    // Provide specific error messages for common issues
    if (error.response?.status === 429) {
      console.warn('LLM service rate limit exceeded. Falling back to standard generation.');
    } else if (error.response?.status === 401) {
      console.warn('LLM service authentication failed. Falling back to standard generation.');
    } else if (error.response?.status === 403) {
      console.warn('LLM service access forbidden. Falling back to standard generation.');
    } else if (error.message.includes('LLM configuration not found')) {
      console.warn('Selected environment does not have LLM configuration. Falling back to standard generation.');
    }
    
    // Fallback to standard generation
    console.log('Falling back to standard generation...');
    return await generateIndividualAPITest(endpoint, environment, null);
  }
}

async function generateLLME2EAPITestSuite(endpoints, resourceName, environment) {
  const llmService = new LLMService();
  const baseUrl = environment?.variables?.API_URL || environment?.variables?.BASE_URL || 'https://fakerestapi.azurewebsites.net';
  const timeout = environment?.variables?.TIMEOUT || 30000;
  
  const prompt = createE2ETestPrompt(endpoints, resourceName, baseUrl);
  
  try {
    const generatedCode = await llmService.generateCode(prompt, environment, {
      testType: 'e2e-api',
      resourceName: resourceName
    });
    
    return postProcessE2ETestCode(generatedCode, endpoints, resourceName, timeout);
  } catch (error) {
    console.error('Error generating LLM E2E test:', error);
    // Fallback to standard generation
    return await generateE2EAPITestSuite(endpoints, resourceName, environment);
  }
}

async function createEnhancedAPITestPrompt2(endpoint, variation, baseUrl, environment) {
  const apiUrl = baseUrl || environment?.variables?.API_URL || environment?.variables?.BASE_URL || 'https://fakerestapi.azurewebsites.net';
  const testVariations = environment?.variables?.TEST_VARIATIONS || ['happy-path', 'negative', 'edge-case', 'boundary', 'security'];
  const authHeaders = await buildAuthorizationHeaders(environment);
  const authInfo = environment?.authorization?.enabled ? 
    `\n- **Authorization**: ${environment.authorization.type} (${environment.authorization.enabled ? 'enabled' : 'disabled'})` : 
    '\n- **Authorization**: None';
 
  return `You are an expert API testing engineer. Generate a comprehensive Playwright API test for the following endpoint with advanced schema analysis and test variations.

## API Endpoint Information:
- **Method**: ${endpoint.method}
- **Path**: ${endpoint.path || endpoint.url || '/unknown'}
- **Base URL**: ${apiUrl}
- **Test Variation**: ${variation}
- **Summary**: ${endpoint.summary || 'API endpoint test'}
- **Description**: ${endpoint.description || 'Test API endpoint functionality'}${authInfo}

## Schema Analysis Requirements:
1. **Request Schema Analysis**:
   - Analyze the expected request body structure
   - Identify required vs optional fields
   - Determine data types and validation rules
   - Identify potential edge cases and boundary values

2. **Response Schema Analysis**:
   - Analyze expected response structure
   - Identify success and error response formats
   - Determine status codes and their meanings
   - Identify response headers and their purposes

3. **Test Variations Generation**:
   - **Happy Path**: Valid request with expected response
   - **Negative Testing**: Invalid requests, missing fields, wrong data types
   - **Edge Cases**: Boundary values, empty strings, null values
   - **Security Testing**: SQL injection, XSS, authentication bypass
   - **Performance Testing**: Large payloads, timeout scenarios

## Generated Test Requirements:

### 1. **Comprehensive Test Structure**:
\`\`\`typescript
import { test, expect, APIRequestContext } from '@playwright/test';
import { allure } from 'allure-playwright';

test.describe('${endpoint.method} ${endpoint.path || endpoint.url || '/unknown'} - ${variation}', () => {
  let requestContext: APIRequestContext;

  test.beforeAll(async () => {
    const { request } = await import('@playwright/test');
    requestContext = await request.newContext({
      baseURL: '${apiUrl}',
      extraHTTPHeaders: ${JSON.stringify(authHeaders, null, 8)},
      timeout: 30000
    });
  });

  test.afterAll(async () => {
    if (requestContext) {
      await requestContext.dispose();
    }
  });
\`\`\`

### 2. **Schema-Based Test Data Generation**:
- Generate realistic test data based on endpoint analysis
- Include valid, invalid, and edge case data
- Create boundary value test cases
- Generate security test payloads

### 3. **Comprehensive Test Cases**:
- **${variation} Test**: Primary test case for this variation
- **Request Validation**: Test request structure and data
- **Response Validation**: Test response structure and data
- **Error Handling**: Test error scenarios and responses
- **Performance**: Test response times and load handling

### 4. **Advanced Reporting**:
- Detailed request/response logging
- Schema validation results
- Performance metrics
- Error analysis and debugging info

### 5. **Test Variations by Type**:

**Happy Path (${variation === 'happy-path' ? 'PRIMARY' : 'SECONDARY'})**:
- Valid request with all required fields
- Expected successful response
- Data validation and type checking

**Negative Testing (${variation === 'negative' ? 'PRIMARY' : 'SECONDARY'})**:
- Missing required fields
- Invalid data types
- Malformed JSON
- Unauthorized access attempts

**Edge Cases (${variation === 'edge-case' ? 'PRIMARY' : 'SECONDARY'})**:
- Boundary values (min/max lengths, numbers)
- Empty strings and null values
- Special characters and encoding
- Large payloads

**Security Testing (${variation === 'security' ? 'PRIMARY' : 'SECONDARY'})**:
- SQL injection attempts
- XSS payloads
- Authentication bypass
- Input sanitization

**Performance Testing (${variation === 'performance' ? 'PRIMARY' : 'SECONDARY'})**:
- Large data sets
- Concurrent requests
- Timeout scenarios
- Memory usage

### 6. **Code Quality Requirements**:
- Use proper TypeScript types (APIResponse for response variables, unknown for error parameters)
- Declare response variables as: \`const response: APIResponse = await requestContext.method(...)\`
- Handle errors with proper typing: \`catch (error: unknown)\`
- Use type guards for error handling: \`error instanceof Error ? error.message : String(error)\`
- Include comprehensive error handling
- Add detailed logging and debugging
- Follow Playwright best practices
- Include Allure reporting integration

### 7. **Environment Configuration**:
- Use environment variables for configuration
- Support multiple environments (dev, staging, prod)
- Include proper timeout and retry logic
- Handle different API versions

### 8. **TypeScript Best Practices**:
- Always import APIResponse from '@playwright/test'
- Declare response variables with explicit types: \`const response: APIResponse = await requestContext.post(...)\`
- Use proper error typing in catch blocks: \`catch (error: unknown)\`
- Avoid variable redeclaration - use unique variable names in different scopes
- Use non-null assertions (!) only when you're certain the variable is defined

Generate a complete, production-ready test that demonstrates advanced API testing techniques with comprehensive schema analysis, multiple test variations, and enterprise-grade reporting.

IMPORTANT: Ensure all TypeScript types are properly declared to avoid compilation errors. Use APIResponse type for all response variables and unknown type for error parameters.

Focus on the **${variation}** variation as the primary test case, but include elements from other variations where relevant.`;

}
async function createEnhancedAPITestPrompt(endpoint, variation, baseUrl, environment) {
  const apiUrl = baseUrl || environment?.variables?.API_URL || environment?.variables?.BASE_URL;
  const testVariations = environment?.variables?.TEST_VARIATIONS || ['happy-path', 'negative', 'edge-case', 'boundary', 'security'];
  const authHeaders = await buildAuthorizationHeaders(environment);

  const method = endpoint.method?.toUpperCase?.() || 'GET';
  const path = endpoint.path || endpoint.url || '/unknown';
  const summary = endpoint.summary || `${method} ${path}`;
  const description = endpoint.description || 'Test API endpoint functionality';

  const pathParams = (endpoint.parameters || []).filter(p => p.in === 'path');
  const queryParams = (endpoint.parameters || []).filter(p => p.in === 'query');
  const headerParams = (endpoint.parameters || []).filter(p => p.in === 'header');

  const stringifyParams = (params) => {
    if (!params.length) return 'None';
    return params.map(param => {
      return `- **${param.name}** (${param.in}) ${param.required ? '(required)' : '(optional)'}: ${param.schema?.type || 'unknown'}${param.schema?.default !== undefined ? ` (default: ${JSON.stringify(param.schema.default)})` : ''}`;
    }).join('\n');
  };

  const authInfo = environment?.authorization?.enabled
    ? `\n- **Authorization**: ${environment.authorization.type} (enabled)`
    : '\n- **Authorization**: None';

  return `You are an expert API testing engineer. Generate a comprehensive Playwright API test for the following endpoint using advanced schema analysis and test variation techniques.

---

## 🧩 API Endpoint Overview

- **Method**: ${method}
- **Path**: \`${path}\`
- **Base URL**: ${apiUrl}
- **Test Focus**: ${variation}
- **Summary**: ${summary}
- **Description**: ${description}${authInfo}

---

## 📥 Input Parameters

### 🧷 Path Parameters
${stringifyParams(pathParams)}

### 🔍 Query Parameters
${stringifyParams(queryParams)}

### 📨 Header Parameters
${stringifyParams(headerParams)}

---

## 🔬 Schema Analysis Requirements

### 1. **Request Schema Analysis**
- **IMPORTANT**: Use ONLY the fields defined in the actual API schema. Do NOT add extra fields like "owner" unless they are explicitly defined in the schema.
- Analyze expected request structure from parameters (path, query, headers)
- Identify required vs optional fields
- Determine data types, default values, and validation rules
- Identify edge cases and boundary values

### 2. **Response Schema Analysis**
- Analyze expected response structure, including success and error formats
- Identify relevant HTTP status codes and their meanings
- Validate response headers (e.g., \`content-type\`)

---

## 🧪 Test Variation: **${variation}**

Define **${variation}** as the primary test focus. Use other test variations from the following list for secondary tests:

${testVariations.map(v => `- ${v === variation ? `✅ **${v.toUpperCase()} (PRIMARY)**` : `⚪ ${v.toUpperCase()} (SECONDARY)`}`).join('\n')}

---

## ✅ Test Implementation Requirements

### 1. **Test Structure (Playwright + Allure)**
\`\`\`typescript
import { test, expect, APIRequestContext, APIResponse } from '@playwright/test';
import { allure } from 'allure-playwright';

test.describe('${method} ${path} - ${variation}', () => {
  let requestContext: APIRequestContext;

  test.beforeAll(async () => {
    const { request } = await import('@playwright/test');
    requestContext = await request.newContext({
      baseURL: '${apiUrl}',
      extraHTTPHeaders: ${JSON.stringify(authHeaders, null, 2)},
      timeout: 30000,
    });
  });

  test.afterAll(async () => {
    await requestContext.dispose();
  });

  // Implement tests here
});
\`\`\`

---

### 2. **Schema-Based Test Cases**
- Generate valid and invalid test data covering:
  - Required and optional query, path, and header parameters
  - Edge cases (long strings, nulls, special characters)
  - Security test payloads (e.g., SQL injection, XSS)
  - Performance edge cases (large values, concurrency)

---

### 3. **Code Quality and Typing**
- Use strict TypeScript typings:
  - e.g., \`const response: APIResponse = await ...\`
  - Catch errors with \`catch (error: unknown)\`
- Employ type guards for error handling
- Avoid variable redeclaration
- Follow strict TypeScript best practices

---

### 4. **Advanced Reporting**
- Utilize Allure for detailed test reporting
- Include request and response logging
- Validate response headers and schema compliance
- Log discrepancies and malformed data

---

### 5. **Environment Configuration Support**
- Use base URL from \`API_URL\` environment variable or fallback to passed \`baseUrl\`
- Support optional headers from environment config (e.g., \`X-Space\`)
- Handle request timeouts, retries, and multiple environments gracefully

---

🔧 **Final Instructions:**
- Deliver a robust, reusable, production-ready Playwright API test
- Prioritize the **${variation}** scenario
- Ensure extensibility for all test types over time
- Maintain excellent code structure, documentation, and typing discipline

Generate the complete, typed Playwright API test code implementing the above.

**CRITICAL**: When generating request body interfaces and data, use ONLY the fields defined in the actual API schema. Do NOT add extra fields like "owner" unless they are explicitly defined in the schema. If the schema only has "name" and "description" fields, use only those fields.
`;
}



function createAPITestPrompt(endpoint, variation, baseUrl) {
  const variationPrompts = {
    'happy-path': `Generate comprehensive API tests for successful scenarios:
    - Valid request with all required parameters
    - Successful response validation (status, headers, body structure)
    - Schema validation for response data
    - Business logic assertions
    - Data consistency checks`,
    
    'error-cases': `Generate API tests covering all error scenarios:
    - 400 Bad Request: Invalid parameters, malformed JSON, missing required fields
    - 401 Unauthorized: Missing or invalid authentication tokens
    - 403 Forbidden: Insufficient permissions, access denied
    - 404 Not Found: Non-existent resources, invalid endpoints
    - 422 Unprocessable Entity: Validation errors, business rule violations
    - 429 Too Many Requests: Rate limiting scenarios
    - 500 Internal Server Error: Server-side error handling
    - Network errors and timeout scenarios`,
    
    'edge-cases': `Generate API tests for boundary and edge conditions:
    - Boundary values: minimum/maximum lengths, numeric limits
    - Empty and null data: empty strings, null values, empty arrays/objects
    - Special characters: Unicode, SQL injection attempts, XSS payloads
    - Large payloads: Maximum allowed data sizes
    - Concurrent requests: Race conditions, data consistency
    - Malformed requests: Invalid JSON, wrong content types
    - Missing optional parameters vs required parameters`,
    
    'security': `Generate security-focused API tests:
    - Authentication bypass attempts
    - Authorization escalation tests
    - Input validation and sanitization
    - SQL injection prevention
    - XSS attack prevention
    - CSRF protection validation
    - Rate limiting enforcement
    - Sensitive data exposure checks
    - Token expiration and refresh scenarios`,
    
    'performance': `Generate performance and reliability tests:
    - Response time assertions (< 2s for normal, < 5s for complex)
    - Concurrent request handling
    - Load testing with multiple simultaneous requests
    - Memory usage validation
    - Timeout handling and retry mechanisms
    - Large dataset processing
    - Caching behavior validation
    - Database connection pooling effects`,
    
    'boundary-conditions': `Generate tests for data boundary conditions:
    - String length limits (empty, 1 char, max length, over limit)
    - Numeric boundaries (min, max, zero, negative, decimal precision)
    - Date/time boundaries (past, future, invalid formats)
    - Array size limits (empty, single item, max size, over limit)
    - File upload limits (size, type, corrupted files)
    - Pagination boundaries (first page, last page, invalid page numbers)`,
    
    'data-validation': `Generate comprehensive data validation tests:
    - Required field validation
    - Data type validation (string, number, boolean, array, object)
    - Format validation (email, phone, URL, date, UUID)
    - Range validation (min/max values, length constraints)
    - Pattern validation (regex patterns, custom formats)
    - Cross-field validation (dependent fields, conditional requirements)
    - Business rule validation (unique constraints, referential integrity)`
  };
  
  const variationPrompt = variationPrompts[variation] || variationPrompts['happy-path'];
  
  return `Create a Playwright API test for the following endpoint:

Endpoint: ${endpoint.method} ${endpoint.path || endpoint.url || '/unknown'}
Summary: ${endpoint.summary || 'API endpoint'}
Description: ${endpoint.description || ''}
Base URL: ${baseUrl}
Parameters: ${JSON.stringify(endpoint.parameters || [], null, 2)}
Responses: ${JSON.stringify(endpoint.responses || {}, null, 2)}

Test Variation: ${variation}
${variationPrompt}

Requirements:
1. Use Playwright's request fixture for API testing
2. **Comprehensive Response Assertions:**
   - Status code validation with specific expected codes
   - Response headers validation (Content-Type, Cache-Control, etc.)
   - Response body structure and data type validation
   - Response time assertions (< 2000ms for normal operations)
   - Content-Length and encoding validation

3. **Schema Validation:**
   - JSON schema validation for response bodies
   - Required field presence validation
   - Data type validation (string, number, boolean, array, object)
   - Format validation (email, date, UUID, URL patterns)
   - Enum value validation where applicable
   - Nested object and array structure validation

4. **Business Logic Assertions:**
   - Domain-specific validation rules
   - Cross-field validation and dependencies
   - Data consistency checks
   - Referential integrity validation
   - Business rule compliance (e.g., unique constraints)
   - State transition validation

5. **Error Handling and Validation:**
   - Proper HTTP status code assertions for error scenarios
   - Error message format and content validation
   - Error response schema validation
   - Graceful handling of network timeouts and failures
   - Retry mechanism testing where applicable

6. **Security Assertions:**
   - Authentication token validation
   - Authorization level verification
   - Sensitive data exposure prevention
   - Input sanitization verification
   - CORS header validation

7. **Performance and Reliability:**
   - Response time thresholds
   - Memory usage monitoring
   - Concurrent request handling
   - Rate limiting compliance
   - Caching behavior validation

8. **Test Data Management:**
   - Generate realistic and varied test data
   - Handle test data dependencies
   - Implement proper test data cleanup
   - Use data factories for consistent test data

9. **Reporting and Debugging:**
   - Include allure reporting tags and descriptions
   - Add detailed logging for request/response data
   - Implement step-by-step test execution logging
   - Add screenshots for UI-related API tests
   - Include performance metrics in reports

10. **Code Quality:**
    - Follow DRY principles with reusable helper functions
    - Implement proper async/await patterns
    - Add comprehensive error handling
    - Include TypeScript types where applicable
    - Add JSDoc comments for complex logic

Generate a complete, production-ready test file with extensive assertions that validate not just the API response, but also the business logic, data integrity, and system behavior.`;
}

function createE2ETestPrompt(endpoints, resourceName, baseUrl) {
  const endpointsList = endpoints.map(ep => `${ep.method} ${ep.path} - ${ep.summary || ''}`).join('\n');
  
  // Analyze endpoints to identify CRUD operations
  const crudOperations = {
    create: endpoints.filter(ep => ep.method.toUpperCase() === 'POST'),
    read: endpoints.filter(ep => ep.method.toUpperCase() === 'GET'),
    update: endpoints.filter(ep => ['PUT', 'PATCH'].includes(ep.method.toUpperCase())),
    delete: endpoints.filter(ep => ep.method.toUpperCase() === 'DELETE')
  };
  
  return `Create a comprehensive E2E API test suite for CRUD operations on the '${resourceName}' resource.

Available Endpoints:
${endpointsList}

CRUD Operations Analysis:
- CREATE: ${crudOperations.create.map(ep => `${ep.method} ${ep.path}`).join(', ') || 'None detected'}
- READ: ${crudOperations.read.map(ep => `${ep.method} ${ep.path}`).join(', ') || 'None detected'}
- UPDATE: ${crudOperations.update.map(ep => `${ep.method} ${ep.path}`).join(', ') || 'None detected'}
- DELETE: ${crudOperations.delete.map(ep => `${ep.method} ${ep.path}`).join(', ') || 'None detected'}

Base URL: ${baseUrl}

Requirements:
1. Create a complete CRUD workflow test with proper data flow:
   a) CREATE: Generate realistic test data and create a new ${resourceName}
      - Store the created resource ID and other key fields
      - Validate response structure and required fields
      - Assert proper status codes (201/200)
   
   b) READ: Retrieve the created ${resourceName} using stored ID
      - Verify all fields match the created data
      - Test both individual GET and collection GET endpoints
      - Validate response schemas and data types
   
   c) UPDATE: Modify the ${resourceName} with new data
      - Use stored ID from CREATE operation
      - Generate updated test data (partial or full)
      - Verify updated fields while preserving unchanged ones
      - Store any new data for subsequent operations
   
   d) DELETE: Remove the ${resourceName}
      - Use stored ID from previous operations
      - Verify successful deletion (204/200 status)
      - Confirm resource no longer exists (404 on subsequent GET)

2. Advanced Data Flow Management:
   - Implement a testData object to store and pass data between steps
   - Handle nested resources and relationships
   - Support array responses and extract IDs from collections
   - Manage dependencies between different resource types
   - Handle pagination in list operations

3. Comprehensive Test Coverage:
   - Test all available endpoints in logical CRUD sequence
   - Include edge cases: empty responses, large datasets, special characters
   - Validate business rules and constraints
   - Test error scenarios: invalid IDs, missing required fields
   - Include boundary testing for numeric and string fields

4. **Advanced Test Data Management:**
   - **Data Factories:** Create reusable data generation functions
     * generateValid${resourceName}Data() - for valid test data
     * generateInvalid${resourceName}Data() - for error testing
     * generateBoundary${resourceName}Data() - for edge cases
     * generateRandom${resourceName}Data() - for varied testing
   
   - **Data Dependencies:** Handle complex relationships
     * Track parent-child resource relationships
     * Manage foreign key dependencies
     * Handle cascading operations and cleanup
     * Support bulk operations and batch processing
   
   - **Data State Management:**
     * Implement testDataRegistry to track all created resources
     * Store resource states (created, updated, deleted)
     * Handle data versioning and history
     * Support rollback operations for failed tests
   
   - **Data Cleanup and Isolation:**
     * Implement comprehensive cleanup in afterEach/afterAll hooks
     * Use unique identifiers to prevent test interference
     * Support parallel test execution with isolated data
     * Handle orphaned data and cleanup failures gracefully

5. **Production-Ready Features:**
   - Add proper Playwright imports and setup with request context
   - Include allure reporting with detailed steps and attachments
   - Implement retry logic for network-dependent operations
   - Add comprehensive logging and debugging information
   - Include performance assertions and timing validations
   - Handle authentication and authorization if required
   - Add health checks and environment validation
   - Support multiple environments (dev, staging, prod)

6. **Error Handling and Recovery:**
   - Implement graceful error handling for each CRUD operation
   - Add retry mechanisms for transient failures
   - Handle partial failures in multi-step operations
   - Include detailed error reporting and diagnostics
   - Support test continuation after non-critical failures

7. **Code Quality and Maintainability:**
   - Use async/await properly throughout
   - Include proper error handling and try-catch blocks
   - Add meaningful test descriptions and comments
   - Follow consistent naming conventions
   - Include JSDoc comments for complex functions
   - Implement helper functions for common operations
   - Use TypeScript interfaces for data structures
   - Add code documentation and usage examples

8. **Test Data Examples:**
   Generate realistic test data that includes:
   - Valid data with all required fields
   - Invalid data for negative testing
   - Boundary values and edge cases
   - Special characters and internationalization
   - Large datasets for performance testing
   - Nested objects and complex data structures

Generate a complete, production-ready E2E test suite that demonstrates the full lifecycle of the ${resourceName} resource with enterprise-grade test data management, comprehensive cleanup procedures, and robust error handling.`;
}

function postProcessAPITestCode(generatedCode, endpoint, variation, timeout, environment = null) {
  // Ensure proper imports and structure
  let processedCode = generatedCode;
  // Fix import issues first
  processedCode = fixImportIssues(processedCode);  
  // Remove duplicate imports and clean up the code
  const lines = processedCode.split('\n');
  const importMap = new Map();
  const nonImportLines = [];
  
  for (const line of lines) {
    if (line.trim().startsWith('import')) {
      // Extract module name and imports
      const importMatch = line.match(/import\s*\{([^}]+)\}\s*from\s*['"]([^'"]+)['"]/);
      if (importMatch) {
        const [, imports, module] = importMatch;
        const cleanImports = imports.split(',').map(imp => imp.trim()).join(', ');
        
        // If we already have imports from this module, merge them
        if (importMap.has(module)) {
          const existingImports = importMap.get(module);
          const allImports = [...new Set([...existingImports.split(',').map(imp => imp.trim()), ...cleanImports.split(',').map(imp => imp.trim())])];
          importMap.set(module, allImports.join(', '));
        } else {
          importMap.set(module, cleanImports);
        }
      } else {
        // Fallback for other import formats
        const normalizedImport = line.trim();
        if (!importMap.has('other')) {
          importMap.set('other', []);
        }
        importMap.get('other').push(normalizedImport);
      }
    } else {
      nonImportLines.push(line);
    }
  }
  
  // Ensure APIResponse is included in @playwright/test imports
  if (importMap.has('@playwright/test')) {
    const playwrightImports = importMap.get('@playwright/test');
    const importsList = playwrightImports.split(',').map(imp => imp.trim());
    if (!importsList.includes('APIResponse')) {
      importsList.push('APIResponse');
      importMap.set('@playwright/test', importsList.join(', '));
    }
  } else {
    importMap.set('@playwright/test', 'test, expect, APIRequestContext, APIResponse');
  }
  
  // Reconstruct imports
  const finalImports = [];
  for (const [module, imports] of importMap) {
    if (module !== 'other') {
      finalImports.push(`import { ${imports} } from '${module}';`);
    } else {
      finalImports.push(...imports);
    }
  }
  
  // Reconstruct with unique imports at the top
  processedCode = [...finalImports, '', ...nonImportLines].join('\n');
  
  // Fix request context setup if using old pattern
  if (processedCode.includes('async ({ request })')) {
    processedCode = processedCode.replace(
      /async \(\{ request \}\)/g,
      'async ()'
    );
  }
  
  // Fix request context usage
  if (processedCode.includes('await request.')) {
    processedCode = processedCode.replace(
      /await request\./g,
      'await requestContext.'
    );
  }
  
  // Fix requestContext.newContext() calls - should be request.newContext()
  if (processedCode.includes('requestContext = await requestContext.newContext(')) {
    processedCode = processedCode.replace(
      /requestContext = await requestContext\.newContext\(/g,
      'requestContext = await request.newContext('
    );
  }
  
  // Fix TypeScript type issues
  processedCode = fixTypeScriptTypes(processedCode);
  
  // Fix duplicate variable declarations in the same scope
  // This is a more complex fix that needs to handle scoped variable conflicts
  processedCode = fixDuplicateVariableDeclarations(processedCode);
  
  // Add proper request context setup if missing
  if (!processedCode.includes('let requestContext: APIRequestContext')) {
    const setupCode = `
  let requestContext: APIRequestContext;

  test.beforeAll(async () => {
    const { request } = await import('@playwright/test');
    requestContext = await request.newContext({
      baseURL: 'https://fakerestapi.azurewebsites.net',
      extraHTTPHeaders: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      timeout: ${timeout}
    });
  });

  test.afterAll(async () => {
    if (requestContext) {
      await requestContext.dispose();
    }
  });`;
    
    processedCode = processedCode.replace(
      /test\.describe\([^)]+\)\s*\{/,
      `test.describe('${endpoint.method} ${endpoint.path || endpoint.url || '/unknown'}', () => {${setupCode}`
    );
  }
  
  // Fix status code expectations to be more flexible
  processedCode = processedCode.replace(
    /expect\(response\.status\(\)\)\.toBe\((\d+)\)/g,
    'expect([200, 201, 400, 404]).toContain(response.status())'
  );
  
  // Add comprehensive request/response reporting if missing
  if (!processedCode.includes('Request Details') && !processedCode.includes('Response Details')) {
    const requestResponseCode = `
    // Prepare request details
    const requestDetails = {
      method: '${endpoint.method}',
      url: '${(environment?.variables?.API_URL || environment?.variables?.BASE_URL || 'https://fakerestapi.azurewebsites.net')}${endpoint.path || endpoint.url || '/unknown'}',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      timestamp: new Date().toISOString()
    };
    
    await allure.step('Request Details', async () => {
      await allure.attachment('Request Method', requestDetails.method, 'text/plain');
      await allure.attachment('Request URL', requestDetails.url, 'text/plain');
      await allure.attachment('Request Headers', JSON.stringify(requestDetails.headers, null, 2), 'application/json');
      await allure.attachment('Request Timestamp', requestDetails.timestamp, 'text/plain');
    });
    
    const startTime = Date.now();
    const response = await requestContext.${endpoint.method.toLowerCase()}('${endpoint.path || endpoint.url || '/unknown'}', {
      headers: requestDetails.headers
    });
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    await allure.step('Response Details', async () => {
      await allure.attachment('Response Status', response.status().toString(), 'text/plain');
      await allure.attachment('Response Headers', JSON.stringify(response.headers(), null, 2), 'application/json');
      await allure.attachment('Response Time', \`\${responseTime}ms\`, 'text/plain');
      
      if (response.status() >= 200 && response.status() < 300) {
        const contentType = response.headers()['content-type'];
        if (contentType && contentType.includes('application/json')) {
          const data = await response.json();
          await allure.attachment('Response Body', JSON.stringify(data, null, 2), 'application/json');
          expect(data).toBeDefined();
        } else {
          const textData = await response.text();
          await allure.attachment('Response Body (Text)', textData, 'text/plain');
        }
      } else {
        const errorData = await response.text();
        await allure.attachment('Error Response', errorData, 'text/plain');
      }
    });
    
    // Performance assertion
    expect(responseTime).toBeLessThan(5000);`;
    
    // Insert before the existing response handling
    processedCode = processedCode.replace(
      /const response = await requestContext\./,
      requestResponseCode + '\n    \n    const response = await requestContext.'
    );
  }
  
  // Add variation tag
  if (!processedCode.includes(`await allure.tag('${variation}')`)) {
    processedCode = processedCode.replace(
      /await allure\.tag\('API Test'\);/,
      `await allure.tag('API Test');
    await allure.tag('${variation}');`
    );
  }
  
  // If endpoint contains a JSON requestBody schema, ensure only required keys are used in generated sample
  try {
    const rb = endpoint?.requestBody?.content;
    if (rb) {
      const jsonKey = Object.keys(rb).find(k => k.toLowerCase().includes('application/json')) || Object.keys(rb)[0];
      const schema = jsonKey ? rb[jsonKey]?.schema : null;
      const required = Array.isArray(schema?.required) ? schema.required : [];
      if (required.length > 0) {
        // Replace any inferred interface/object literals to only include required keys if we can locate them
        // Heuristic: if code declares a variable named similar to sampleBody or request payload, filter properties to required
        processedCode = processedCode.replace(/const\s+(sampleBody|requestBody|payload)\s*=\s*\{([\s\S]*?)\};/g, (m, name, body) => {
          const obj = {};
          // naive parse of top-level key: value pairs
          required.forEach(key => {
            const re = new RegExp(`\\b${key}\\s*:\\s*([\\s\\S]*?)(,|\n|$)`);
            const match = body.match(re);
            if (match) obj[key] = match[1].trim();
          });
          const rebuilt = Object.keys(obj).map(k => `  ${k}: ${obj[k]}`).join(',\n');
          return `const ${name} = {\n${rebuilt}\n};`;
        });
      }
    }
  } catch (e) {
    // best-effort; ignore errors
  }
  
  // Fix bad console.error ternary usage: avoid calling the ternary result as a function
  processedCode = processedCode.replace(
    /console\.error instanceof Error \? error\.message : String\(error\)\('([^']+)',\s*(error instanceof Error \? error\.message : String\(error\))\);/g,
    (m, msg, errExpr) => `console.error('${msg}', ${errExpr});`
  );
  
  // Ensure createdProjectId is cast to string when assigned
  processedCode = processedCode.replace(
    /createdProjectId\s*=\s*responseData\.id;/g,
    "createdProjectId = String((responseData as any).id || '');"
  );
  
  // Update deprecated faker API usage
  processedCode = processedCode.replace(
    /faker\.company\.companyName\(\)/g,
    'faker.company.name()'
  );
  

  // Remove extra fields from interface definitions that are not in the actual schema
  try {
    const rb = endpoint?.requestBody?.content;
    if (rb) {
      const jsonKey = Object.keys(rb).find(k => k.toLowerCase().includes(application/json)) || Object.keys(rb)[0];
      const schema = jsonKey ? rb[jsonKey]?.schema : null;
      const schemaFields = Object.keys(schema?.properties || {});
      if (schemaFields.length > 0) {
        // Remove extra fields from interface definitions
        processedCode = processedCode.replace(/interfaces+(w+Request)s*{([^}]+)}/g, (match, interfaceName, body) => {
          const lines = body.split(n).filter(line => line.trim());
          const filteredLines = lines.filter(line => {
            const fieldName = line.match(/^s*(w+)s*:/)?.[1];
            return !fieldName || schemaFields.includes(fieldName);
          });
          return `interface ${interfaceName} {\n${filteredLines.join(n)}\n}`;
        });
      }
    }
  } catch (e) {
    // best-effort; ignore errors
  }  return processedCode;
}

function postProcessE2ETestCode(generatedCode, endpoints, resourceName, timeout) {
  // Ensure proper imports and structure
  let processedCode = generatedCode;
  
  // Fix request context setup if using old pattern
  if (processedCode.includes('async ({ request })')) {
    processedCode = processedCode.replace(
      /async \(\{ request \}\)/g,
      'async ()'
    );
  }
  
  // Fix request context usage
  if (processedCode.includes('await request.')) {
    processedCode = processedCode.replace(
      /await request\./g,
      'await requestContext.'
    );
  }
  
  // Fix status code expectations to be more flexible
  processedCode = processedCode.replace(
    /expect\(response.*?\.status\(\)\)\.toBe\((\d+)\)/g,
    'expect([200, 201, 400, 404]).toContain(response.status())'
  );
  
  // Only add test data management if it doesn't already exist
  if (!processedCode.includes('// Test Data Management') && !processedCode.includes('const testDataRegistry') && !processedCode.includes('function generateValid')){
    const dataManagementCode = `
// Test Data Management
interface TestResource {
  id: string;
  data: any;
  cleanup?: () => Promise<void>;
}

interface TestResponse {
  method: string;
  path: string;
  status: number;
  responseTime: number;
  timestamp: string;
}

interface TestDataRegistry {
  created: any;
  updated: any;
  ids: string[];
  responses: TestResponse[];
}

const testDataRegistry: TestDataRegistry = {
  created: {},
  updated: {},
  ids: [],
  responses: []
};

const createdResources: TestResource[] = [];

// Data Factory Functions
function generateValid${resourceName}Data(): any {
  return {
    id: Date.now() + Math.random(),
    name: \`Test ${resourceName} \${Date.now()}\`,
    description: \`Generated test data for ${resourceName} at \${new Date().toISOString()}\`,
    createdAt: new Date().toISOString(),
    // Add more realistic fields based on resource type
  };
}

function generateInvalid${resourceName}Data(): any {
  return {
    // Missing required fields or invalid data types
    invalidField: null,
    name: '', // Empty required field
    description: 'x'.repeat(10000), // Exceeds length limit
  };
}

function generateBoundary${resourceName}Data(): any {
  return {
    name: 'a', // Minimum length
    description: 'x'.repeat(255), // Maximum length
    numericField: Number.MAX_SAFE_INTEGER,
    dateField: new Date('1900-01-01').toISOString(),
  };
}

// Test Data Registry Functions
function registerTestData(id: string, data: any): void {
  testDataRegistry.created = data;
  if (data && data.id) {
    testDataRegistry.ids.push(data.id);
  }
  createdResources.push({ id, data });
}

function getTestData(id: string): any {
  return testDataRegistry.created;
}

function clearTestDataRegistry(): void {
  testDataRegistry.created = {};
  testDataRegistry.updated = {};
  testDataRegistry.ids = [];
  testDataRegistry.responses = [];
  createdResources.length = 0;
}

// Cleanup Functions
async function cleanupTestData(request: any): Promise<void> {
  console.log(\`Starting cleanup of \${createdResources.length} test resources...\`);
  
  // Cleanup in reverse order (LIFO) to handle dependencies
  for (let i = createdResources.length - 1; i >= 0; i--) {
    const resource = createdResources[i];
    try {
      const deleteResponse = await request.delete(\`/api/v1/${resourceName.toLowerCase()}/\${resource.id}\`);
      if (deleteResponse.status() === 204 || deleteResponse.status() === 200) {
        console.log(\`Successfully cleaned up ${resourceName} with ID: \${resource.id}\`);
      }
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.warn(\`Failed to cleanup ${resourceName} with ID: \${resource.id}\`, errorMessage);
    }
  }
  
  clearTestDataRegistry();
  console.log('Test data cleanup completed.');
}
`;
    
    processedCode = dataManagementCode + processedCode;
  }
  
  // Add timeout if not present
  if (!processedCode.includes('test.setTimeout')) {
    processedCode = processedCode.replace(
      /test\.beforeEach\(async \(\) => \{/,
      `test.beforeEach(async () => {
    test.setTimeout(${timeout});`
    );
  }
  
  // Add comprehensive cleanup in afterEach
  if (!processedCode.includes('test.afterEach')) {
    processedCode = processedCode.replace(
      /test\.beforeEach\(async \(\) => \{[\s\S]*?\}\);/,
      `$&

  test.afterEach(async ({ request }) => {
    // Cleanup test data after each test
    await cleanupTestData(request);
  });`
    );
  }
  
  // Add resource tag
  if (!processedCode.includes(`await allure.tag('${resourceName}')`)) {
    processedCode = processedCode.replace(
      /await allure\.tag\('E2E'\);/,
      `await allure.tag('E2E');
    await allure.tag('${resourceName}');
    await allure.tag('CRUD-Workflow');`
    );
  }
  
  // Remove emojis and fix string literal issues - comprehensive emoji removal
  processedCode = processedCode.replace(/[\u{1F000}-\u{1F9FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]|[\u{1F100}-\u{1F1FF}]|[\u{1F200}-\u{1F2FF}]|[\u{1F300}-\u{1F5FF}]|[\u{1F600}-\u{1F64F}]|[\u{1F680}-\u{1F6FF}]|[\u{1F700}-\u{1F77F}]|[\u{1F780}-\u{1F7FF}]|[\u{1F800}-\u{1F8FF}]|[\u{1F900}-\u{1F9FF}]|[\u{1FA00}-\u{1FA6F}]|[\u{1FA70}-\u{1FAFF}]|[\u{2190}-\u{21FF}]|[\u{2300}-\u{23FF}]|[\u{2B00}-\u{2BFF}]|[\u{3030}]|[\u{303D}]|[\u{3297}]|[\u{3299}]/gu, '');
  
  // Fix broken string literals caused by line breaks - more comprehensive approach
  processedCode = processedCode.replace(/console\.log\('([^']*?)\n([^']*?)\'\);/g, "console.log('$1 $2');");
  processedCode = processedCode.replace(/console\.log\('\s*\n\s*([^']*)\'\);/g, "console.log('$1');");
  processedCode = processedCode.replace(/console\.log\('([^']*?)\s*\n\s*([^']*)\'\);/g, "console.log('$1 $2');");
  // Fix any remaining broken console.log statements
  processedCode = processedCode.replace(/console\.log\([^)]*\n[^)]*\)/g, (match) => {
    return match.replace(/\n/g, ' ').replace(/\s+/g, ' ');
  });
  
  // Replace testData references with testDataRegistry to match our data management structure
  processedCode = processedCode.replace(/testData\./g, 'testDataRegistry.');
  processedCode = processedCode.replace(/const testData = /g, 'const testDataRegistry: TestDataRegistry = ');
  processedCode = processedCode.replace(/let testData = /g, 'let testDataRegistry: TestDataRegistry = ');
  
  // Add TypeScript interfaces if not already present
  if (!processedCode.includes('interface TestResponse') && !processedCode.includes('interface TestDataRegistry')) {
    const interfaceDefinitions = `
interface TestResponse {
  method: string;
  path: string;
  status: number;
  responseTime: number;
  timestamp: string;
}

interface TestDataRegistry {
  created: any;
  updated: any;
  ids: any[];
  responses: TestResponse[];
}
`;
    
    // Insert interfaces after the last import statement
    processedCode = processedCode.replace(/(import.*?;\s*\n)(\s*\n)?/, `$1${interfaceDefinitions}\n`);
  }
  
  // Only add error handling if it doesn't already exist
  if (!processedCode.includes('// Enhanced Error Handling') && !processedCode.includes('function handleTestError') && !processedCode.includes('function retryOperation')) {
    const errorHandlingCode = `
// Enhanced Error Handling
function handleTestError(error: unknown, operation: string, resourceId: string | null = null) {
  const errorMessage = error instanceof Error ? error.message : String(error);
  const errorStack = error instanceof Error ? error.stack : undefined;
  
  console.error(\`Error during \${operation}:\`, {
    message: errorMessage,
    resourceId,
    timestamp: new Date().toISOString(),
    stack: errorStack
  });
  
  // Add to allure report
  allure.attachment('Error Details', JSON.stringify({
    operation,
    resourceId,
    error: errorMessage,
    timestamp: new Date().toISOString()
  }), 'application/json');
}

// Retry mechanism for network operations
async function retryOperation<T>(operation: () => Promise<T>, maxRetries = 3, delay = 1000): Promise<T> {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      if (attempt === maxRetries) {
        throw error;
      }
      console.log(\`Attempt \${attempt} failed, retrying in \${delay}ms...\`);
      await new Promise(resolve => setTimeout(resolve, delay));
      delay *= 2; // Exponential backoff
    }
  }
}
`;
    
    processedCode = processedCode.replace(
      /\/\/ Test Data Management/,
      `// Test Data Management${errorHandlingCode}`
    );
  }
  

  // Remove extra fields from interface definitions that are not in the actual schema
  try {
    const rb = endpoint?.requestBody?.content;
    if (rb) {
      const jsonKey = Object.keys(rb).find(k => k.toLowerCase().includes(application/json)) || Object.keys(rb)[0];
      const schema = jsonKey ? rb[jsonKey]?.schema : null;
      const schemaFields = Object.keys(schema?.properties || {});
      if (schemaFields.length > 0) {
        // Remove extra fields from interface definitions
        processedCode = processedCode.replace(/interfaces+(w+Request)s*{([^}]+)}/g, (match, interfaceName, body) => {
          const lines = body.split(n).filter(line => line.trim());
          const filteredLines = lines.filter(line => {
            const fieldName = line.match(/^s*(w+)s*:/)?.[1];
            return !fieldName || schemaFields.includes(fieldName);
          });
          return `interface ${interfaceName} {\n${filteredLines.join(n)}\n}`;
        });
      }
    }
  } catch (e) {
    // best-effort; ignore errors
  }  return processedCode;
}

function fixTypeScriptTypes(code) {
  let processedCode = code;
  
  // Fix response variable declarations to use proper TypeScript types
  // Pattern: const response = await requestContext.post(...)
  processedCode = processedCode.replace(
    /(const|let)\s+(response)\s*=\s*await\s+requestContext\./g,
    '$1 $2: APIResponse = await requestContext.'
  );
  
  // Fix response variable declarations without type annotation
  processedCode = processedCode.replace(
    /(const|let)\s+(response)\s*;/g,
    '$1 $2: APIResponse | undefined;'
  );
  
  // Fix error handling in catch blocks
  processedCode = processedCode.replace(
    /catch\s*\(\s*(\w+)\s*\)/g,
    'catch ($1: unknown)'
  );
  
  // Fix error message extraction in catch blocks
  processedCode = processedCode.replace(
    /(console\.log|console\.error)\(.*?error\)/g,
    (match) => {
      if (match.includes('error instanceof Error')) {
        return match;
      }
      return match.replace(/error/g, 'error instanceof Error ? error.message : String(error)');
    }
  );
  
  // Fix response usage with proper null checks
  processedCode = processedCode.replace(
    /response\.(status|headers|json|text)\(/g,
    'response!.$1('
  );
  

  // Remove extra fields from interface definitions that are not in the actual schema
  try {
    const rb = endpoint?.requestBody?.content;
    if (rb) {
      const jsonKey = Object.keys(rb).find(k => k.toLowerCase().includes(application/json)) || Object.keys(rb)[0];
      const schema = jsonKey ? rb[jsonKey]?.schema : null;
      const schemaFields = Object.keys(schema?.properties || {});
      if (schemaFields.length > 0) {
        // Remove extra fields from interface definitions
        processedCode = processedCode.replace(/interfaces+(w+Request)s*{([^}]+)}/g, (match, interfaceName, body) => {
          const lines = body.split(n).filter(line => line.trim());
          const filteredLines = lines.filter(line => {
            const fieldName = line.match(/^s*(w+)s*:/)?.[1];
            return !fieldName || schemaFields.includes(fieldName);
          });
          return `interface ${interfaceName} {\n${filteredLines.join(n)}\n}`;
        });
      }
    }
  } catch (e) {
    // best-effort; ignore errors
  }  return processedCode;
}

function fixDuplicateVariableDeclarations(code) {
  // Split code into lines for processing
  const lines = code.split('\n');
  const processedLines = [];
  const variableDeclarations = new Map(); // Track variable declarations by scope
  
  let currentScope = 0; // Track nesting level
  const scopeStack = [0];
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const trimmedLine = line.trim();
    
    // Track scope changes
    if (trimmedLine.includes('{')) {
      currentScope++;
      scopeStack.push(currentScope);
    }
    if (trimmedLine.includes('}')) {
      scopeStack.pop();
      currentScope = scopeStack[scopeStack.length - 1] || 0;
    }
    
    // Check for variable declarations
    const constMatch = trimmedLine.match(/^const\s+(\w+)\s*=/);
    const letMatch = trimmedLine.match(/^let\s+(\w+)\s*=/);
    
    if (constMatch || letMatch) {
      const varName = constMatch ? constMatch[1] : letMatch[1];
      const scopeKey = `${currentScope}-${varName}`;
      
      if (variableDeclarations.has(scopeKey)) {
        // Variable already declared in this scope, change to assignment
        const assignmentLine = line.replace(/^(const|let)\s+/, '');
        processedLines.push(assignmentLine);
      } else {
        // First declaration in this scope
        variableDeclarations.set(scopeKey, true);
        processedLines.push(line);
      }
    } else {
      processedLines.push(line);
    }
  }
  
  return processedLines.join('\n');
}

module.exports = router;